# -*- coding: utf-8 -*-
"""sistemas_lineares_LU.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vUI64JpwIdpAsMk57TQc9g66QDbPjNpI
"""



"""Considere o sistema com duas equações lineares

2x+3y=4

5x+4y=3

Graficamente, podemos obter a solução deste sistema? Como ?
"""

import matplotlib.pyplot as plt
import numpy as np
x = np.linspace(-4, 2, 100)
y1 = (-2*x+4)/3
y2 = (-5*x+3)/4
fig, ax = plt.subplots()
ax.plot(x, y1, color="blue", label="y1(x)")
ax.plot(x, y2, color="red", label="y2(x)")
ax.set_xlabel("x")
ax.set_ylabel("y")
ax.legend()

# Decomposição LU (SymPy)

import sympy
A = sympy.Matrix([[1, 2,0], [1, 3,1],[-2, 0,1] ])
b = sympy.Matrix([3, 5,-1])
L, U, _ = A.LUdecomposition()
print(L)
print(U)
print(L*U)
x = A.solve(b); print(x) # equivalent to A.LUsolve(b)

# Decomposição LU
# L,U = fatoraLU(a).
# LU decomposition: [L][U] = [a]. The returned matrix
# L, U are lower and upper triangle. 

# x = LUsolve(a,b).
# Solves [L][U]{x} = b, where [a] = [L][U] is the matrix returned from fatoraLU(a).

import numpy as np

def fatoraLU(A):  
    U = np.copy(A)  
    n = np.shape(U)[0]  
    L = np.eye(n)  
    for j in np.arange(n-1):  
        for i in np.arange(j+1,n):  
            L[i,j] = U[i,j]/U[j,j]  
            for k in np.arange(j+1,n):  
                U[i,k] = U[i,k] - L[i,j]*U[j,k]  
            U[i,j] = 0  
    return L, U

def fatoraLU2(A):
     n = np.shape(A)[0]
     L = np.eye(n) 
     U = np.zeros((n,n))
     for k  in np.arange(n):
        for j in np.arange(k,n):
           U[k,j]=A[k,j]
           for s in np.arange(k):
               U[k,j]=U[k,j]-L[k,s]*U[s,j]
        for i in np.arange(k+1,n):
           L[i,k]=A[i,k]
           for s in np.arange(k):
               L[i,k]=L[i,k]-L[i,s]*U[s,k]
           L[i,k]=L[i,k]/U[k,k]
     return L, U   

def LUsolve(A,b):
   n = np.shape(A)[0]  
   L,U = fatoraLU(A)
   for k in range(1,n):
      b[k] = b[k] - L[k,0:k].dot(b[0:k])
   for k in range(n-1,-1,-1):
      b[k] = (b[k] - U[k,k+1:n].dot(b[k+1:n]))/U[k,k]
   return b

# Exemplo 
A = np.array([[1, 2,0], [1, 3,1],[-2, 0,1]])
b = np.array([3,5,-1])
L,U = fatoraLU2(A)
print(L)
print(U)
print(L.dot(U))
x = LUsolve(A,b)
print(x)